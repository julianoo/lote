// Generated by CoffeeScript 1.9.2
(function() {
  var Lote,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Lote = (function() {
    var amostraAdicionadaList, amostras, fimProcessoList, inicioProcessoList;

    function Lote(id) {
      this.id = id;
      this.fireAmostraAdicionada = bind(this.fireAmostraAdicionada, this);
      this.addAmostraAdicionada = bind(this.addAmostraAdicionada, this);
      this.fireFimProcesso = bind(this.fireFimProcesso, this);
      this.addFimProcesso = bind(this.addFimProcesso, this);
      this.fireInicioProcesso = bind(this.fireInicioProcesso, this);
      this.addInicioProcesso = bind(this.addInicioProcesso, this);
      this.addAmostra = bind(this.addAmostra, this);
      this.status = 'aberto';
      console.log('novo lote ' + this.id);
      setTimeout(this.fireInicioProcesso, 30000);
    }

    amostras = [];

    inicioProcessoList = [];

    fimProcessoList = [];

    amostraAdicionadaList = [];

    Lote.prototype.addAmostra = function(a) {
      amostras.push(a);
      return this.fireAmostraAdicionada(a);
    };

    Lote.prototype.addInicioProcesso = function(f) {
      inicioProcessoList.push(f);
      return this;
    };

    Lote.prototype.fireInicioProcesso = function() {
      var f, i, len, results;
      this.status = 'processo';
      console.log('lote em processo ' + this.id);
      results = [];
      for (i = 0, len = inicioProcessoList.length; i < len; i++) {
        f = inicioProcessoList[i];
        results.push(f(this));
      }
      return results;
    };

    Lote.prototype.addFimProcesso = function(f) {
      fimProcessoList.push(f);
      return this;
    };

    Lote.prototype.fireFimProcesso = function() {
      var f, i, len, results;
      this.status = 'pronto';
      console.log('lote pronto' + this.id);
      results = [];
      for (i = 0, len = fimProcessoList.length; i < len; i++) {
        f = fimProcessoList[i];
        results.push(f(this));
      }
      return results;
    };

    Lote.prototype.addAmostraAdicionada = function(f) {
      amostraAdicionadaList.push(f);
      return this;
    };

    Lote.prototype.fireAmostraAdicionada = function(a) {
      var f, i, len, results;
      console.log('amostra no lote ' + a.id);
      results = [];
      for (i = 0, len = amostraAdicionadaList.length; i < len; i++) {
        f = amostraAdicionadaList[i];
        results.push(f(this, a));
      }
      return results;
    };

    return Lote;

  })();

  root.Lote = Lote;

}).call(this);
